(define (nodo? ele arbol)
  (cond ((null? arbol)
         #f)
        (else
         (nodo_aux ele (aplastar arbol)))))

(define (nodo_aux ele lista)
  (cond ((null? lista)
         #f)
        ((equal? ele (car lista))
         #t)
        (else
         (nodo_aux ele (cdr lista)))))

; Otro
; Convertir arbol en lista
(define (aplastar arbol)
  (cond ((null? arbol)
         '())
        (else
         (append (list (raiz arbol))
                 (aplastar (hijo-izq arbol))
                 (aplastar (hijo-der arbol))))))

; Raiz e hijos
(define (raiz arbol)
  (cond ((atom? arbol)
         arbol)
        (else
         (car arbol))))

(define (hijo-izq arbol)
  (cond ((atom? arbol)
         '())
        (else
         (cadr arbol))))

(define (hijo-der arbol)
  (cond ((atom? arbol)
         '())
        (else
         (caddr arbol))))

; Atomo?
(define (atom? ele)
  (not (list? ele)))

; Hoja?
(define (hoja? ele)
  (cond ((null? ele)
         #f)
        ((atom? ele)
         #t)
        ((null? (cdr ele))
         #t)
        (else
         #f)))
(define (pivot lista)
  (cond ((null? lista)
         #f)
        (else
         (pivotd (car lista) (cdr lista) '() '()))))

(define (pivotd punto lista menores mayores)
  (cond ((null? lista)
         (list menores mayores))
        ((<= punto (car lista))
         (pivotd punto (cdr lista) menores (cons (car lista) mayores)))
        (else ;> punto (car lista)
         (pivotd punto (cdr lista) (cons (car lista) menores) mayores))))

(define (quick-sort lista)
  (cond ((null? lista)
         '())
        (else
         (let*
             ((punto (car lista))
              (menores-mayores (pivot lista))
              (menores (car menores-mayores))
              (mayores (cadr menores-mayores))
              )
           (append (quick-sort menores)
                   (list punto)
                   (quick-sort mayores))))))